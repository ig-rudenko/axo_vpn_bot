from aiogram import Router
from aiogram.types import InlineKeyboardButton, CallbackQuery, BufferedInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder

from helpers.bot_answers_shortcuts import send_technical_error
from .callback_factories import ExtendRentCallbackFactory as ExtendRentCF
from db import VPNConnection, ActiveBills, User, Server
from .buy_service import month_verbose
from .callback_factories import GetConfigCallbackFactory as GetConfigCF

router = Router()


class UserProfile:
    """
    –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –ø—Ä–æ—Ñ–∏–ª–µ–º –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π.
    """

    def __init__(self, user: User):
        self._user = user

        # –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self._vpn_connections: list[VPNConnection] = []

        # –¢–µ–∫—É—â–∏–µ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ —Å—á–µ—Ç–∞
        self._active_bills: list[ActiveBills] = []

        self._keyboard = InlineKeyboardBuilder()
        self._text_lines = []

    async def collect_vpn_connections(self):
        self._vpn_connections = await self._user.get_connections()

    async def collect_active_bills(self):
        self._active_bills = await self._user.get_active_bills()

    def get_keyboard(self) -> InlineKeyboardBuilder:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–±–æ—Ä –∫–Ω–æ–ø–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.
        :return:
        """
        return self._keyboard

    def get_text(self) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.
        """
        return "\n".join(self._text_lines)

    async def create_profile(self) -> None:
        """
        –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        if self._user_has_no_data():
            self._create_empty_user_profile()

        else:
            await self._create_new_active_bills_info_text()
            await self._create_text_and_add_buttons_for_users_connections()
            self._add_button_to_start()

    def _user_has_no_data(self) -> bool:
        return not len(self._vpn_connections) and not len(self._active_bills)

    def _create_empty_user_profile(self) -> None:
        self._keyboard.row(
            InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å", callback_data="choose_location")
        )
        self._add_button_to_start()
        self._text_lines = ["üü† –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"]

    def _add_button_to_start(self):
        self._keyboard.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="start"))

    async def _create_new_active_bills_info_text(self) -> None:
        """
        –°–æ–∑–¥–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤—ã—Ö —Å—á–µ—Ç–æ–≤ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.
        """
        for bill in self._active_bills:
            if bill.type == "new":
                try:
                    server = await Server.get(id=bill.vpn_connections[0].server_id)
                except Server.DoesNotExists:
                    continue

                self._text_lines.append(
                    f"‚è≥ –û–∂–∏–¥–∞–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞:\n"
                    f"–ù–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å {bill.rent_month} {month_verbose(bill.rent_month)} "
                    f"{server.verbose_location}\n"
                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {len(bill.vpn_connections)}\n"
                    f'<a href="{bill.pay_url}">–§–æ—Ä–º–∞ –æ–ø–ª–∞—Ç—ã</a>'
                    f' –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–æ {bill.available_to.strftime("%H:%M:%S")}\n'
                )

    async def _create_text_and_add_buttons_for_users_connections(self) -> None:
        """
        –°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–±–æ –≤—Å–µ—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è—Ö –∏–º–µ—é—â–∏—Ö—Å—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        self._text_lines.append(
            f"\n–£ –≤–∞—Å –∏–º–µ–µ—Ç—Å—è: {len(self._vpn_connections)} –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π\n"
        )

        # –°–º–æ—Ç—Ä–∏–º –ø–æ –æ—á–µ—Ä–µ–¥–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        for i, connection in enumerate(self._vpn_connections, 1):
            buttons_row: list[InlineKeyboardButton] = []

            await self._create_info_for_connection(
                connection, conn_number=i, buttons_row=buttons_row
            )

            self._create_text_for_extended_connection(
                connection, conn_number=i, buttons_row=buttons_row
            )

            if buttons_row:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                self._keyboard.row(*buttons_row)

    async def _create_info_for_connection(
        self,
        connection: VPNConnection,
        conn_number: int,
        buttons_row: list[InlineKeyboardButton],
    ) -> None:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–¥–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏.
        :param connection: –û–±—ä–µ–∫—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.
        :param conn_number: –ù–æ–º–µ—Ä –≤ —Å–ø–∏—Å–∫–µ –ø–æ –ø–æ—Ä—è–¥–∫—É.
        :param buttons_row: –°–ø–∏—Å–æ–∫ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –∫–Ω–æ–ø–∫–∏.
        """

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        try:
            server = await Server.get(id=connection.server_id)
        except Server.DoesNotExists:
            return

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (—Å–æ—Å—Ç–æ—è–Ω–∏–µ)
        self._text_lines.append(
            f"# {conn_number}: {'üü¢' if connection.available else 'üî¥'}  {server.verbose_location}\n"
            f"{connection.local_ip}"
        )
        if connection.available:
            self._text_lines.append(
                f"–î–æ—Å—Ç—É–ø–Ω–æ –¥–æ {connection.available_to.strftime('%Y.%m.%d %H:%M')}"
            )
            buttons_row.append(
                InlineKeyboardButton(
                    text=f"# {conn_number} - ‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥",
                    callback_data=GetConfigCF(connection_id=connection.id).pack(),
                )
            )
        self._text_lines.append("\n")

    def _create_text_for_extended_connection(
        self,
        connection: VPNConnection,
        conn_number: int,
        buttons_row: list[InlineKeyboardButton],
    ) -> None:
        # –ò–º–µ–µ—Ç—Å—è –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        for bill in self._active_bills:
            conn_ids = [conn.id for conn in bill.vpn_connections]
            if bill.type == "extend" and connection.id in conn_ids:
                self._text_lines.append(
                    f"–í—ã —É–∂–µ –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏ –Ω–∞ {bill.rent_month} {month_verbose(bill.rent_month)}\n"
                    f' <a href="{bill.pay_url}">–§–æ—Ä–º–∞ –æ–ø–ª–∞—Ç—ã</a>'
                    f' –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–æ {bill.available_to.strftime("%H:%M:%S")}'
                )
                break
        else:
            self._create_button_for_extend(
                connection, conn_number=conn_number, buttons_row=buttons_row
            )

    def _create_button_for_extend(
        self,
        connection: VPNConnection,
        conn_number: int,
        buttons_row: list[InlineKeyboardButton],
    ) -> None:
        if not len(self._active_bills):
            # –§–æ—Ä–º–∏—Ä—É–µ–º callback data –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏ VPN
            extend_rent_callback = ExtendRentCF(
                connection_id=connection.id,
                server_id=connection.server_id,
            )

            # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º –æ–ø–ª–∞—Ç—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è,
            # —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–¥–ª–µ–Ω–∏—è
            buttons_row.append(
                InlineKeyboardButton(
                    text=f"# {conn_number} - –ø—Ä–æ–¥–ª–∏—Ç—å",
                    callback_data=extend_rent_callback.pack(),
                )
            )


@router.callback_query(text="show_profile")
async def show_profile(callback: CallbackQuery):
    user = await User.get_or_create(tg_id=callback.from_user.id)

    user_profile = UserProfile(user)
    await user_profile.collect_vpn_connections()
    await user_profile.collect_active_bills()
    await user_profile.create_profile()

    await callback.message.edit_text(
        text=user_profile.get_text(),
        reply_markup=user_profile.get_keyboard().as_markup(),
    )
    await callback.answer()


@router.callback_query(GetConfigCF.filter())
async def get_user_config(callback: CallbackQuery, callback_data: GetConfigCF):
    try:
        user = await User.get(tg_id=callback.from_user.id)
    except User.DoesNotExists:
        # –ù–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await send_technical_error(callback, "‚ùóÔ∏è–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏‚ùóÔ∏è")
        return

    try:
        # –°–º–æ—Ç—Ä–∏–º –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        connection: VPNConnection = await VPNConnection.get(
            id=callback_data.connection_id, user_id=user.id
        )
        if not connection.available or not connection.available_to:
            await send_technical_error(
                callback, "‚ùóÔ∏è–î–∞–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ‚ùóÔ∏è"
            )
            return
    except VPNConnection.DoesNotExists:
        await send_technical_error(callback, "‚ùó–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è‚ùóÔ∏è")
        return

    try:
        server = await Server.get(id=connection.server_id)
    except Server.DoesNotExists:
        await send_technical_error(callback, "‚ùó–°–µ—Ä–≤–µ—Ä –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç‚ùóÔ∏è")
        return

    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–π–¥–µ–Ω–∞.
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –µ—ë –∏–º—è –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞.
    config = connection.config.encode()
    file_name = server.name + ".conf"

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞.
    # await callback.message.delete()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    await callback.message.answer_document(
        BufferedInputFile(bytes(config), filename=file_name),
        caption=f"–ù–µ –∏–∑–º–µ–Ω—è–π—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞, –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã",
    )
    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="show_profile"))
    await callback.message.answer(
        text=f"–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª—å", reply_markup=keyboard.as_markup()
    )
    await callback.answer()
