import hashlib
import io

import flag

from aiogram import Router
from aiogram.types import InlineKeyboardButton, CallbackQuery, BufferedInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder

from .callback_factories import ExtendRentCallbackFactory as ExtendRentCF
from db import VPNConnection, ActiveBills, User, Server
from .buy_service import month_verbose
from .callback_factories import GetConfigCallbackFactory as GetConfigCF

router = Router()


@router.callback_query(text="show_profile")
async def show_profile(callback: CallbackQuery):

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user: User = await User.get_or_create(tg_id=callback.from_user.id)

    # –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    vpn_connections = await user.get_connections()

    # –¢–µ–∫—É—â–∏–µ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ —Å—á–µ—Ç–∞
    active_bills = await user.get_active_bills()

    text = ""
    for bill in active_bills:
        if bill.type == "new":
            bill: ActiveBills
            text += (
                f"‚è≥ –û–∂–∏–¥–∞–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞:\n"
                f"–ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ "
                f'<a href="{bill.pay_url}">–§–æ—Ä–º–∞ –æ–ø–ª–∞—Ç—ã</a>'
                f' –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–æ {bill.available_to.strftime("%H:%M:%S")}\n\n'
            )

    keyboard = InlineKeyboardBuilder()

    # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not len(vpn_connections):
        keyboard.add(
            InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å", callback_data="choose_location")
        )
        keyboard.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="start"))
        await callback.message.edit_text(
            text + "üü† –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π",
            reply_markup=keyboard.as_markup(),
        )
        await callback.answer()
        return

    # –ò–º–µ—é—Ç—Å—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    text += f"–£ –≤–∞—Å –∏–º–µ–µ—Ç—Å—è: {len(vpn_connections)} –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π\n\n"

    # –°–º–æ—Ç—Ä–∏–º –ø–æ –æ—á–µ—Ä–µ–¥–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    for i, connection in enumerate(vpn_connections, 1):
        connection: VPNConnection
        connection_buttons = []

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        if server := await Server.get(id=connection.server_id):
            connection_location = f"{flag.flag(server.country_code)} {server.location}"
        else:
            connection_location = "–õ–æ–∫–∞—Ü–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞!"

        # –§–æ—Ä–º–∏—Ä—É–µ–º callback data –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏ VPN
        extend_rent_callback = ExtendRentCF(
            connection_id=connection.id, server_id=connection.server_id
        )

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (—Å–æ—Å—Ç–æ—è–Ω–∏–µ)
        text += f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ {i}: {'üü¢' if connection.available else 'üî¥'}  {connection_location}\n"
        if connection.available:
            text += (
                f"–î–æ—Å—Ç—É–ø–Ω–æ –¥–æ {connection.available_to.strftime('%Y.%m.%d %H:%M')}\n"
            )
            connection_buttons.append(
                InlineKeyboardButton(
                    text=f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ {i} - ‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥",
                    callback_data=GetConfigCF(connection_id=connection.id).pack(),
                )
            )

        # –ò–º–µ–µ—Ç—Å—è –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        for bill in active_bills:
            conn_ids = [conn.id for conn in bill.vpn_connections]
            if bill.type == "extend" and connection.id in conn_ids:
                text += (
                    f"–í—ã —É–∂–µ –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏ –Ω–∞ {bill.rent_month} {month_verbose(bill.rent_month)}\n"
                    f' <a href="{bill.pay_url}">–§–æ—Ä–º–∞ –æ–ø–ª–∞—Ç—ã</a>'
                    f' –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–æ {bill.available_to.strftime("%H:%M:%S")}\n'
                )
                break
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º –æ–ø–ª–∞—Ç—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è,
            # —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–¥–ª–µ–Ω–∏—è
            connection_buttons.append(
                InlineKeyboardButton(
                    text=f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ {i} - –ø—Ä–æ–¥–ª–∏—Ç—å",
                    callback_data=extend_rent_callback.pack(),
                )
            )

        text += "\n"

        if connection_buttons:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            keyboard.row(*connection_buttons)

    keyboard.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="start"))
    await callback.message.edit_text(text, reply_markup=keyboard.as_markup())
    await callback.answer()


@router.callback_query(GetConfigCF.filter())
async def get_user_config(callback: CallbackQuery, callback_data: GetConfigCF):
    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text="üîù –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="start"))

    user = await User.get(tg_id=callback.from_user.id)
    if user is None:
        # –ù–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await callback.message.edit_text(
            "‚ùóÔ∏è–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏‚ùóÔ∏è", reply_markup=keyboard.as_markup()
        )
        await callback.answer()
        return

    # –°–º–æ—Ç—Ä–∏–º –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    connection = await VPNConnection.get(
        id=callback_data.connection_id, user_id=user.id
    )
    if connection is None or not connection.available or not connection.available_to:
        # –ù–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ç–∞–∫–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –æ–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
        await callback.message.edit_text(
            "‚ùó–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è‚ùóÔ∏è", reply_markup=keyboard.as_markup()
        )
        await callback.answer()
        return

    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–π–¥–µ–Ω–∞
    keyboard = InlineKeyboardBuilder()
    keyboard.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="show_profile"))

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –µ—ë –∏–º—è –∫–∞–∫ —Ö—ç—à.
    config = connection.config.encode()
    file_name = hashlib.md5(config).hexdigest()

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞.
    await callback.message.delete()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    await callback.message.answer_document(
        BufferedInputFile(bytes(config), filename=file_name),
        caption=f"–ù–µ –∏–∑–º–µ–Ω—è–π—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞, –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã",
    )
    await callback.message.answer(
        text=f"–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª—å", reply_markup=keyboard.as_markup()
    )
    await callback.answer()
