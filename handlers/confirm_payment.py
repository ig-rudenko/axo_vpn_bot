import os
import uuid

import aiohttp
from datetime import datetime, timedelta

from magic_filter import F
from aiogram import Router
from aiogram.types import InlineKeyboardButton, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from sqlalchemy import select, update

from .callback_factories import ConfirmPaymentCallbackFactory as ConfirmPaymentCF
from db import Server, VPNConnection, async_db_session, ActiveBills, User

router = Router()


@router.callback_query(ConfirmPaymentCF.filter(F.type_ == "new"))
async def create_bill_for_new_rent(
    callback: CallbackQuery, callback_data: ConfirmPaymentCF
):

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ —Å–≤–æ–±–æ–¥–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –Ω–∞ –¥–∞–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ
    free_connection = list(
        await VPNConnection.get_free(callback_data.server_id, callback_data.count)
    )

    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text="üîù –ù–∞–∑–∞–¥", callback_data="start"))

    if not free_connection:
        await callback.message.edit_text(
            "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å", reply_markup=keyboard.as_markup()
        )
        await callback.answer()
        return
    if len(free_connection) < callback_data.count:
        await callback.message.edit_text(
            f"–£–∫–∞–∂–∏—Ç–µ –º–µ–Ω—å—à–µ–µ –∫–æ–ª-–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤\n–î–æ—Å—Ç—É–ø–Ω–æ {len(free_connection)}",
            reply_markup=keyboard.as_markup(),
        )
        await callback.answer()
        return

    # –ù–∞ –≤—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã —É–∫–∞–∑–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–æ–ª-–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–º–æ—Ä–æ–∑–∏—Ç—å, —á—Ç–æ–±—ã –Ω–µ –∑–∞–Ω—è–ª–∏ –¥—Ä—É–≥–∏–µ
    async with async_db_session() as session:
        await session.execute(
            update(VPNConnection),
            [{"id": conn.id, "free": 2} for conn in free_connection],
        )
        await session.commit()

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if user := await User.get_by_tg(tg_id=callback.from_user.id):
        user_id = user.id
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ —Å–æ–∑–¥–∞–µ–º
        user_id = await User.create(tg_id=callback.from_user.id)

    available_time = datetime.now() + timedelta(minutes=10)

    # –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Ñ–æ—Ä–º—ã –æ–ø–ª–∞—Ç—ã 10 –º–∏–Ω
    async with aiohttp.ClientSession() as session:
        response = await session.put(
            url=f"https://api.qiwi.com/partner/bill/v1/bills/{uuid.uuid4()}",
            headers={
                "accept": "application/json",
                "Authorization": "Bearer " + os.getenv("QIWI_TOKEN"),
            },
            json={
                "amount": {"currency": "RUB", "value": callback_data.cost},
                "comment": "Axo VPN",
                "expirationDateTime": f"{available_time.strftime('%Y-%m-%dT%H:%M:%S+03:00')}",
            },
        )
    if response.status == 200:
        data = await response.json()

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—á–µ—Ç –æ–± –æ–ø–ª–∞—Ç–µ
        async with async_db_session() as session:
            new_bill = ActiveBills(
                bill_id=data["billId"],
                user=user_id,
                available_to=available_time,
                type="new",
                rent_month=callback_data.month,
                pay_url=data["payUrl"],
                vpn_connections=free_connection,
            )
            session.add(new_bill)
            await session.commit()

        # res = await ActiveBills.create(
        #     bill_id=bill_id,
        #     user=user_id
        # )
        # print(
        #     bill_id,
        #     str(available_time.timestamp()),
        #     user_id,
        #     # user_devs_ids,
        #     "new",
        #     str(rent_to.timestamp()),
        #     data["payUrl"],
        # )

        await callback.message.edit_text(
            f"–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É Qiwi: "
            f'<a href="{data["payUrl"]}">–û–ø–ª–∞—Ç–∏—Ç—å</a>\n–î–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç!\n\n'
            f"–†–µ–∫–≤–∏–∑–∏—Ç—ã –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –ø–æ <b>–∑–∞—â–∏—â–µ–Ω–Ω—ã–º –ø—Ä–æ—Ç–æ–∫–æ–ª–∞–º</b> –∏ –Ω–µ "
            f"–ø–æ–ø–∞–¥—É—Ç –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω –∏ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º.\n–ü–ª–∞—Ç–µ–∂–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –Ω–∞ –∑–∞—â–∏—â–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥–∞ "
            f'–ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É <a href="https://ru.wikipedia.org/wiki/PCI_DSS">'
            f"<b>PCI DSS ‚Äì Payment Card Industry Data Security Standard.</b></a>",
            reply_markup=keyboard.as_markup(),
        )
        await callback.answer()

    else:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–æ—Ä–º—É –æ–ø–ª–∞—Ç—ã, —Ç–æ–≥–¥–∞ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        # await unpause_devs(user_devs_ids)
        await callback.message.edit_text(
            "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏, –ø—Ä–æ–Ω–æ—Å–∏–º —Å–≤–æ–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏—è :(",
            reply_markup=keyboard.as_markup(),
        )
