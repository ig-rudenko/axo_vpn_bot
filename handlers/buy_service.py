import flag
from aiogram import Router
from aiogram.types import InlineKeyboardButton, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from db import Server
from helpers.verbose_numbers import month_verbose
from .callback_factories import (
    DeviceCountCallbackFactory as DevCountCF,
    BuyCallbackFactory as BuyCF,
    ConfirmPaymentCallbackFactory as ConfirmPaymentCF,
    ExtendRentCallbackFactory as ExtendRentCF,
)


router = Router()


@router.callback_query(text="choose_location")
async def choose_location(callback: CallbackQuery):
    keyboard = InlineKeyboardBuilder()
    # –°–º–æ—Ç—Ä–∏–º —Å–ø–∏—Å–æ–∫ VPN —Å–µ—Ä–≤–µ—Ä–æ–≤
    for server in await Server.all(values=["country_code", "location"]):
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ —Å—Ç—Ä–∞–Ω—ã –∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ VPN —Å–µ—Ä–≤–µ—Ä–∞
        text = flag.flagize(
            f":{server.country_code}: {server.location}\n", subregions=True
        )
        keyboard.add(
            InlineKeyboardButton(
                text=text, callback_data=DevCountCF(count=1, server_id=server.id).pack()
            )
        )
    await callback.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ VPN —Å–µ—Ä–≤–µ—Ä", reply_markup=keyboard.as_markup()
    )
    await callback.answer()


def add_period_keyboard(keyboard: InlineKeyboardBuilder, callback_data):
    print(callback_data)
    if isinstance(callback_data, DevCountCF):
        base_cost = 50 + 100 * callback_data.count
        end_data = {"count": callback_data.count}
        type_ = "new"
    else:
        base_cost = 150
        type_ = "extend"
        end_data = {"connection_id": callback_data.connection_id}

    # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –æ–ø–ª–∞—Ç—ã
    # 1, 2 –ú–ï–°–Ø–¶–ê
    keyboard.row(
        InlineKeyboardButton(
            text=f"1Ô∏è‚É£ –º–µ—Å—è—Ü - {base_cost} ‚ÇΩ",
            callback_data=BuyCF(
                type_=type_,
                month=1,
                cost=base_cost,
                server_id=callback_data.server_id,
                **end_data,
            ).pack(),
        ),
        InlineKeyboardButton(
            text=f"2Ô∏è‚É£ –º–µ—Å—è—Ü–∞ - {round(base_cost * 2)} ‚ÇΩ",
            callback_data=BuyCF(
                type_=type_,
                month=2,
                cost=round(base_cost * 2),
                server_id=callback_data.server_id,
                **end_data,
            ).pack(),
        ),
    )

    # 3, 4 –ú–ï–°–Ø–¶–ê
    keyboard.row(
        InlineKeyboardButton(
            text=f"3Ô∏è‚É£ –º–µ—Å—è—Ü–∞ - {round(base_cost * 3)} ‚ÇΩ",
            callback_data=BuyCF(
                type_=type_,
                month=3,
                cost=round(base_cost * 3),
                server_id=callback_data.server_id,
                **end_data,
            ).pack(),
        ),
        InlineKeyboardButton(
            text=f"4Ô∏è‚É£ –º–µ—Å—è—Ü–∞ - {round(base_cost * 4)} ‚ÇΩ",
            callback_data=BuyCF(
                type_=type_,
                month=4,
                cost=round(base_cost * 4),
                server_id=callback_data.server_id,
                **end_data,
            ).pack(),
        ),
    )

    # 5, 6 –ú–ï–°–Ø–¶–ï–í
    keyboard.row(
        InlineKeyboardButton(
            text=f"5Ô∏è‚É£ –º–µ—Å—è—Ü–µ–≤ - {round(base_cost * 5)} ‚ÇΩ",
            callback_data=BuyCF(
                type_=type_,
                month=5,
                cost=round(base_cost * 5),
                server_id=callback_data.server_id,
                **end_data,
            ).pack(),
        )
    )

    keyboard.row(
        InlineKeyboardButton(
            text=f"6Ô∏è‚É£ –º–µ—Å—è—Ü–µ–≤ üî∏ -20% üî∏ - {round(base_cost * 6 * 0.8)} ‚ÇΩ",
            callback_data=BuyCF(
                type_=type_,
                month=6,
                cost=round(base_cost * 6 * 0.8),
                server_id=callback_data.server_id,
                **end_data,
            ).pack(),
        )
    )

    # 1 –ì–û–î
    keyboard.row(
        InlineKeyboardButton(
            text=f"1Ô∏è‚É£ –≥–æ–¥ üîπ -30% üîπ - {round(base_cost * 12 * 0.7)} ‚ÇΩ",
            callback_data=BuyCF(
                type_=type_,
                month=12,
                cost=round(base_cost * 12 * 0.7),
                server_id=callback_data.server_id,
                **end_data,
            ).pack(),
        )
    )


@router.callback_query(DevCountCF.filter())
async def show_prices(callback: CallbackQuery, callback_data: DevCountCF):
    """
    –í—ã–±–æ—Ä –∫–æ–ª-–≤–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∏ –ø–µ—Ä–∏–æ–¥–∞
    """

    keyboard = InlineKeyboardBuilder()
    if callback_data.count > 1:
        keyboard.row(
            InlineKeyboardButton(
                text="‚ûñ –£–±—Ä–∞—Ç—å –æ–¥–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ",
                callback_data=DevCountCF(
                    count=callback_data.count - 1, server_id=callback_data.server_id
                ).pack(),
            )
        )
    if callback_data.count < 4:
        keyboard.row(
            InlineKeyboardButton(
                text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ",
                callback_data=DevCountCF(
                    count=callback_data.count + 1, server_id=callback_data.server_id
                ).pack(),
            )
        )

    add_period_keyboard(keyboard, callback_data)

    keyboard.row(InlineKeyboardButton(text="üîù –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="start"))

    await callback.message.edit_text(
        text=f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–π: <b>{callback_data.count}</b>\n" f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –∞—Ä–µ–Ω–¥—ã",
        reply_markup=keyboard.as_markup(),
    )
    await callback.answer()


# –ü–†–û–î–õ–ò–¢–¨ –ê–†–ï–ù–î–£
@router.callback_query(ExtendRentCF.filter())
async def extend_rent(callback: CallbackQuery, callback_data: ExtendRentCF):
    keyboard = InlineKeyboardBuilder()

    add_period_keyboard(keyboard, callback_data)

    keyboard.add(InlineKeyboardButton(text="‚úñÔ∏è–û—Ç–º–µ–Ω–∞", callback_data=f"show_profile"))
    await callback.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –∞—Ä–µ–Ω–¥—ã", reply_markup=keyboard.as_markup()
    )
    await callback.answer()


# –°–û–ì–õ–ê–°–ò–ï –ù–ê –ü–û–ö–£–ü–ö–£
@router.callback_query(BuyCF.filter())
async def confirm_payment(callback: CallbackQuery, callback_data: BuyCF):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏
    """

    keyboard = InlineKeyboardBuilder().row(
        InlineKeyboardButton(
            text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ", callback_data="user_agreement"
        )
    )

    if callback_data.type_ == "extend":
        # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã
        confirm_callback = ConfirmPaymentCF(
            type_="extend",
            cost=callback_data.cost,
            count=1,
            month=callback_data.month,
            connection_id=callback_data.connection_id,
            server_id=callback_data.server_id,
        )

        text = (
            f"–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã ‚è©\n"
            f"–ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç–∏—Ç—å, –í—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º \n"
        )
        keyboard.row(
            InlineKeyboardButton(
                text=f"–û–ø–ª–∞—Ç–∏—Ç—å {callback_data.cost} ‚ÇΩ",
                callback_data=confirm_callback.pack(),
            ),
            InlineKeyboardButton(text="‚úñÔ∏è–û—Ç–º–µ–Ω–∞", callback_data="show_profile"),
        )

    elif callback_data.type_ == "new":
        # –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        confirm_callback = ConfirmPaymentCF(
            type_="new",
            cost=callback_data.cost,
            count=callback_data.count,
            month=callback_data.month,
            server_id=callback_data.server_id,
        )
        # –ù–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞
        text = (
            f"–í–∞—à–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {callback_data.count} üì≤\n"
            f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã: {callback_data.month} {month_verbose(callback_data.month)}\n"
            f"–ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç–∏—Ç—å, –í—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º \n"
        )
        keyboard.row(
            InlineKeyboardButton(
                text=f"–û–ø–ª–∞—Ç–∏—Ç—å {callback_data.cost} ‚ÇΩ",
                callback_data=confirm_callback.pack(),
            ),
            InlineKeyboardButton(text="‚úñÔ∏è–û—Ç–º–µ–Ω–∞", callback_data="start"),
        )

    else:
        text = "‚ùó–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ‚ùó"
        keyboard = InlineKeyboardBuilder().add(
            InlineKeyboardButton(text="‚úñÔ∏è–û—Ç–º–µ–Ω–∞", callback_data="start")
        )

    await callback.message.edit_text(text, reply_markup=keyboard.as_markup())
    await callback.answer()
